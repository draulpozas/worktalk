<?php

require_once __DIR__."/../config/autoload.php";

class ChatController{
    /**
     * Calls a View method to display a chat list generated by self::getHTMLList().
     */
    public static function list(){
        $replace = [
            '{{items}}' => self::getHTMLList(),
        ];

        View::listChats($replace);
    }

    /**
     * Checks if the current user is a member of the specified chat_id.
     * If they are, it calls a View function to display the chat.
     * If they are not, it calls a View function to display an adequate warning.
     */
    public static function show($chat_id){
        $chat = new Chat($chat_id);
        if ($chat->hasUser($_SESSION['user_id'])) {
            $msgs = Message::getListByChat($chat_id);

            $replace = [
                '{{chat_id}}' => $chat_id,
                '{{chat_name}}' => $chat->name(),
                '{{items}}' => $chat->getHtml(),
                '{{share_code}}' => $chat->share_code(),
                '{{delete_link}}' => '',
                '{{rename_link}}' => '',
            ];

            if ($chat->getRole($_SESSION['user_id']) == 'admin') {
                $replace['{{delete_link}}'] = '<br><a href="./delete.php?chat_id='.$chat_id.'">{{deletechat}}</a>';
                $replace['{{rename_link}}'] = '<a href="./rename.php?chat_id='.$chat_id.'">{{rename_chat}}</a><br>';
            }

            $chat->updateLastConnection($_SESSION['user_id']);
            View::showChat($replace);
        } else {
            View::unavailableContent();
        }
    }

    /**
     * Checks if the user has submitted any input.
     * If they have, it creates a new Chat object, saves it, adds the user to the chat and sets them as admin.
     * Then, it sends an automatic message to the chat, from its creator, indicating that the chat has been created, and calls self::show() to display the newly created chat.
     * If no input has been submitted, then it calls a View method to collect the necessary data for the creation of the new chat.
     */
    public static function new(){
        if ($_POST) {
            $chat = new Chat();
            if (isset($_POST['name'])) {
                $chat->name($_POST['name']);
            } else {
                $chat->name('unnamed chat');
            }
            $chat->save();
            $chat = Chat::getLastInsertedElement();
            $chat->addUser($_SESSION['user_id']);
            $id = $chat->id();
            $chat->setAdmin($_SESSION['user_id'], $id);
            Message::sendNewMessage($id, $_SESSION['user_id'], 'Created the chat.');
            self::show($id);
        }
        else {
            View::newChat();
        }
    }

    /**
     * Checks if the current user is an admin of the specified chat.
     * If they are, it deletes all the messages from the chat, then removes all the users from it and deletes the chat.
     * Finally, it redirects to the main page.
     */
    public static function delete($chat_id){
        $chat = new Chat($chat_id);
        if ($chat->getRole($_SESSION['user_id']) == 'admin') {
            $msgs = Message::getListByChat($chat_id);

            foreach ($msgs as $msg) {
                $msg->delete();
            }

            $usrs = $chat->getUsers();

            foreach ($usrs as $usr) {
                $chat->removeUser($usr->id());
            }
            
            $chat->delete();
            header("location: ". APP_URL);
        } else {
            return false;
        }
    }

    /**
     * Removes the specified user_id from the specified chat.
     * Sends a message to the chat informing about the event.
     * It redirects to the chat page.
     */
    public static function removeUser($user_id, $chat_id){
        Message::sendNewMessage($chat_id, $user_id, "Was removed from the chat.");
        $chat = new Chat($chat_id);
        $chat->removeUser($user_id);
        header("location: ". APP_URL ."/chat.php?id=$chat_id");
    }

    /**
     * Checks if the current user is an admin of the specified chat. If they are not, it returns false.
     * If they are, then it checks if a new name has been submitted as input.
     * If it has, it changes the chat's name in case it is different from the previous one, and sends an appropriate message.
     * If no input has been submitted, if calls a View function to collect the necessary data.
     */
    public static function rename($chat_id){
        $chat = new Chat($chat_id);
        if ($chat->getRole($_SESSION['user_id']) != 'admin') {
            return false;
        }
        if (isset($_POST['new_name'])) {
            if ($chat->name() != $_POST['new_name']) {
                $new_name = $_POST['new_name'];
                Message::sendNewMessage($chat_id, $_SESSION['user_id'], "Changed the chat name to: $new_name.");
                $chat->name($new_name);
                $chat->save();
            }
            header("location: ". APP_URL ."/chat.php?id=$chat_id");
        } else {
            $name = $chat->name();
            $replace = [
                '{{name}}' => $name,
            ];
            View::renameChat($replace);
        }
    }

    /**
     * Returns the whole list of chats the current user is a member of, represented as HTML list items. 
     * First, it sorts the chats by their last update, then it creates the string and returns it.
     */
    public static function getHTMLList(){
        $chats = Chat::getListByUser($_SESSION['user_id']);

        usort($chats, function($a, $b){
            $time_a = (new DateTime($a->getLastUpdate()))->getTimestamp();
            $time_b = (new DateTime($b->getLastUpdate()))->getTimestamp();
            return ($time_b - $time_a);
        });

        $items_str = '';

        if ($chats) {
            for ($i=0; $i < count($chats); $i++) { 
                $name = $chats[$i]->name();
                $id = $chats[$i]->id();
                $items_str .= "<li><a href=\"chat.php?id=$id\">$name";
                if ($chats[$i]->getLastConnection($_SESSION['user_id'], $id) < $chats[$i]->getLastUpdate()) {
                    $items_str .= "<span style=\"color: #44c56eff; float: right;\">â¦¿</span>";
                }
                $items_str .= "</a></li>";
            }
        } else {
            $items_str = "{{nochats}}";
        }

        return $items_str;
    }

    /**
     * Gets the list of users of the specified chat and calls a View function to display it. 
     */
    public static function members($chat_id){
        $chat = new Chat($chat_id);
        $usrs = $chat->getUsers();
        
        $items_str = '';
        foreach ($usrs as $usr) {
            if ($usr->id() == $_SESSION['user_id']) {
                $items_str .= $usr->username() ."<br>";
            } else if (!$usr->isFriend($_SESSION['user_id'])) {
                $items_str .= $usr->username() . ($chat->getRole($usr->id()) == 'admin' ? " (admin) ": '') ."<a href=\"friends/addAsFriend.php?user_id=". $usr->id() ."\"> {{addasfriend}}</a><br>";
            } else {
                $items_str .= $usr->username() . ($chat->getRole($usr->id()) == 'admin' ? " (admin) ": '') ."<a href=\"newPrivateChat.php?user_id=". $usr->id() ."\"> {{privatechat}}</a><br>";
            }
        }

        View::members(['{{items}}' => $items_str]);
    }

    /**
     * Creates a new chat with the users specified, both added as admins.
     * Redirects to the chat page. 
     */
    public static function newPrivateChat($user_id_1, $user_id_2){
        $chat = new Chat();
        $chat->save();
        $chat = Chat::getLastInsertedElement(); // for getting the chat id, as it is only generated when the chat has been inserted into the database table
        $usr1 = new User($user_id_1);
        $usr2 = new User($user_id_2);

        $chat->addUser($user_id_1);
        $chat->addUser($user_id_2);
        $chat->name($usr1->username() ." - ". $usr2->username());
        $chat->setAdmin($user_id_1, $chat->id());
        $chat->setAdmin($user_id_2, $chat->id());
        $chat->save();
        Message::sendNewMessage($chat->id(), $user_id_1, 'Created the chat.');
        header("location: ". APP_URL ."/chat.php?id=". $chat->id());
    }
}

 ?>